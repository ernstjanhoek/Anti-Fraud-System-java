type: edu
files:
  - name: src/antifraud/TransactionRequest.java
    visible: true
    text: |-
      package antifraud;
      
      import jakarta.validation.constraints.Min;
      
      public class TransactionRequest {
          @Min(1)
          private long amount;
          public long getAmount() {
              return amount;
          }
          public void setAmount(long amount) {
              this.amount = amount;
          }
      }
    learner_created: false
  - name: src/antifraud/UserDTO.java
    visible: true
    text: |-
      package antifraud;
      
      public class UserDTO {
          long id;
          String name;
          String username;
          public long getId() {
              return id;
          }
          public void setId(long id) {
              this.id = id;
          }
          public String getName() {
              return name;
          }
          public void setName(String name) {
              this.name = name;
          }
          public void setUsername(String username) {
              this.username = username;
          }
          public String getUsername() {
              return username;
          }
      }
    learner_created: false
  - name: src/antifraud/SecurityConfig.java
    visible: true
    text: |2
       package antifraud;
    
       import org.springframework.context.annotation.Bean;
       import org.springframework.context.annotation.Configuration;
       import org.springframework.security.config.Customizer;
       import org.springframework.security.config.annotation.web.builders.HttpSecurity;
       import org.springframework.security.config.http.SessionCreationPolicy;
       import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
       import org.springframework.security.crypto.password.PasswordEncoder;
       import org.springframework.security.web.SecurityFilterChain;
       import org.springframework.security.config.annotation.web.configurers.CsrfConfigurer;
       import org.springframework.http.HttpMethod;
    
       @Configuration
       public class SecurityConfig {
           @Bean
           public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
               return http
                       .httpBasic(Customizer.withDefaults())
                       .csrf(CsrfConfigurer::disable)                           // For modifying requests via Postman
                       .exceptionHandling(handing -> handing
                           .authenticationEntryPoint(new RestAuthenticationEntryPoint()) // Handles auth error: Voorheen stond hier restAuthenticationEntryPoint als value, maar in het voorbeeld verwees die nergens heen.
                       )
                       .headers(headers -> headers.frameOptions().disable())           // for Postman, the H2 console
                       .authorizeHttpRequests(requests -> requests                     // manage access
                                       .requestMatchers(HttpMethod.POST, "/api/auth/user").permitAll()
                                       .requestMatchers("/actuator/shutdown").permitAll()      // needs to run test
                                       .requestMatchers(HttpMethod.POST, "/api/antifraud/transaction").hasAuthority("USER")
                                       .requestMatchers(HttpMethod.GET, "/api/auth/list").hasAuthority("USER")
                                       .requestMatchers(HttpMethod.DELETE, "/api/auth/user").hasAuthority("USER")
    
                               // other matchers
                       )
                       .sessionManagement(session -> session
                               .sessionCreationPolicy(SessionCreationPolicy.STATELESS) // no session
                       )
                       // other configurations
                       .build();
           }
           @Bean
           public PasswordEncoder passwordEncoder() {
               return new BCryptPasswordEncoder();
           }
       }
    learner_created: false
  - name: src/antifraud/UserDetailsServiceImpl.java
    visible: true
    text: |
      package antifraud;
      
      import org.springframework.security.core.userdetails.UserDetails;
      import org.springframework.security.core.userdetails.UserDetailsService;
      import org.springframework.security.core.userdetails.UsernameNotFoundException;
      import org.springframework.stereotype.Service;
      @Service
      public class UserDetailsServiceImpl implements UserDetailsService {
          private final UserRepository repository;
          public UserDetailsServiceImpl(UserRepository repository) {
              this.repository = repository;
          }
          @Override
          public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
              User user = repository
                      .findUserByUsername(username)
                      .orElseThrow(() -> new UsernameNotFoundException("Not found"));
              return new UserAdapter(user);
          }
      }
    learner_created: false
  - name: src/antifraud/UserAdapter.java
    visible: true
    text: |
      package antifraud;
      
      import org.springframework.security.core.GrantedAuthority;
      import org.springframework.security.core.authority.SimpleGrantedAuthority;
      import org.springframework.security.core.userdetails.UserDetails;
      import java.util.Collection;
      import java.util.List;
      
      public class UserAdapter implements UserDetails {
          private final User user;
          public UserAdapter(User user) {
              this.user = user;
          }
          @Override
          public Collection<? extends GrantedAuthority> getAuthorities() {
              return List.of(new SimpleGrantedAuthority("USER"));
          }
          @Override
          public String getPassword() {
              return user.getPassword();
          }
          @Override
          public String getUsername() {
              return user.getUsername();
          }
          @Override
          public boolean isAccountNonExpired() {
              return true;
          }
          @Override
          public boolean isAccountNonLocked() {
              return true;
          }
          @Override
          public boolean isCredentialsNonExpired() {
              return true;
          }
          @Override
          public boolean isEnabled() {
              return true;
          }
      }
    learner_created: false
  - name: src/antifraud/Transaction.java
    visible: true
    text: |
      package antifraud;
      
      import jakarta.validation.constraints.Min;
      import org.springframework.http.HttpStatus;
      import org.springframework.web.server.ResponseStatusException;
      
      public class Transaction {
          private long amount;
          private long allowedLimit;
          private long manualLimit;
          public void setAmount(long value) {
              this.amount = value;
          }
          public long getAmount() {
              return amount;
          }
          public void setAllowedLimit(long allowedLimit) {
              this.allowedLimit = allowedLimit;
          }
          public long getAllowedLimit() {
              return allowedLimit;
          }
          public long getManualLimit() {
              return manualLimit;
          }
          public void setManualLimit(long manualLimit) {
              this.manualLimit = manualLimit;
          }
          public TransactionProcess validateInput() {
              if (this.amount <= this.allowedLimit) {
                  return TransactionProcess.ALLOWED;
              } else if (this.amount <= this.manualLimit) {
                  return TransactionProcess.MANUAL_PROCESSING;
              } else {
                  return TransactionProcess.PROHIBITED;
              }
          }
          public enum TransactionProcess {
              ALLOWED, PROHIBITED, MANUAL_PROCESSING;
          }
      }
    learner_created: false
  - name: src/antifraud/TransactionDTO.java
    visible: true
    text: |-
      package antifraud;
      
      public class TransactionDTO {
          private String result;
          public String getResult() {
              return result;
          }
          public void setResult(String result) {
              this.result = result;
          }
      }
    learner_created: false
  - name: src/antifraud/User.java
    visible: true
    text: |-
      package antifraud;
      
      import jakarta.persistence.Entity;
      import jakarta.persistence.Table;
      import jakarta.persistence.GeneratedValue;
      import jakarta.persistence.Id;
      
      @Entity
      @Table(name = "app_user")
      public class User {
      
          @Id
          @GeneratedValue
          private Long id;
          private String name;
          private String username;
          private String password;
          private String authority;
          public String getName() {
              return name;
          }
          public void setName(String name) {
              // if (name.isEmpty()) {
              //     throw new ResponseStatusException(HttpStatus.BAD_REQUEST);
              // }
              this.name = name;
          }
          public String getUsername() {
              return username;
          }
          public void setUsername(String username) {
              // if (username.isEmpty()) {
              //     throw new ResponseStatusException(HttpStatus.BAD_REQUEST);
              // }
              this.username = username;
          }
          public String getPassword() {
              return password;
          }
          public void setPassword(String password) {
              // if (password.isEmpty()) {
              //     throw new ResponseStatusException(HttpStatus.BAD_REQUEST);
              // }
              this.password = password;
          }
          public void setId(Long id) {
              this.id = id;
          }
          public Long getId() {
              return id;
          }
          public String getAuthority() {
              return authority;
          }
          public void setAuthority(String authority) {
              this.authority = authority;
          }
      }
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    text: |-
      server.port=28852
      # server.error.include-message=always
      management.endpoints.web.exposure.include=*
      management.endpoint.shutdown.enabled=true
      spring.jackson.serialization.INDENT_OUTPUT=true
      spring.datasource.driverClassName=org.h2.Driver
      spring.datasource.url=jdbc:h2:file:../service_db
      spring.jpa.hibernate.ddl-auto=update
      spring.h2.console.enabled=true
      spring.h2.console.settings.trace=false
    learner_created: false
  - name: src/antifraud/UserRequest.java
    visible: true
    text: |-
      package antifraud;
      
      import jakarta.validation.constraints.NotBlank;
      
      public class UserRequest {
          @NotBlank
          private String name;
          @NotBlank
          private String username;
          @NotBlank
          private String password;
          public String getName() {
              return name;
          }
          public void setName(String name) {
              this.name = name;
          }
          public String getUsername() {
              return username;
          }
          public void setUsername(String username) {
              this.username = username;
          }
          public String getPassword() {
              return password;
          }
          public void setPassword(String password) {
              this.password = password;
          }
      }
    learner_created: false
  - name: src/antifraud/UserRepository.java
    visible: true
    text: |-
      package antifraud;
      import org.springframework.data.repository.CrudRepository;
      import java.util.Optional;
      
      public interface UserRepository extends CrudRepository<User, Integer> {
          Optional<User> findUserByUsername(String username);
      }
    learner_created: false
  - name: src/antifraud/RestAuthenticationEntryPoint.java
    visible: true
    text: |-
      package antifraud;
      
      import jakarta.servlet.ServletException;
      import jakarta.servlet.http.HttpServletRequest;
      import jakarta.servlet.http.HttpServletResponse;
      import org.springframework.security.web.AuthenticationEntryPoint;
      import org.springframework.stereotype.Component;
      
      import java.io.IOException;
      
      @Component
      public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {
          @Override
          public void commence(HttpServletRequest request, HttpServletResponse response, org.springframework.security.core.AuthenticationException authException) throws IOException, ServletException {
              response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
          }
      }
    learner_created: false
  - name: src/antifraud/DebugSecurityConfig.java
    visible: true
    text: |-
      /* package antifraud;
      
      import org.springframework.context.annotation.Bean;
      import org.springframework.context.annotation.Configuration;
      import org.springframework.security.config.Customizer;
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.http.SessionCreationPolicy;
      import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
      import org.springframework.security.crypto.password.PasswordEncoder;
      import org.springframework.security.web.SecurityFilterChain;
      import org.springframework.security.config.annotation.web.configurers.CsrfConfigurer;
      import org.springframework.http.HttpMethod;
      
      @Configuration
      public class DebugSecurityConfig {
      
          private final RestAuthenticationEntryPoint restAuthenticationEntryPoint;
      
          public DebugSecurityConfig(RestAuthenticationEntryPoint restAuthenticationEntryPoint) {
              this.restAuthenticationEntryPoint = restAuthenticationEntryPoint;
          }
          @Bean
          public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
              return http
                      .httpBasic(Customizer.withDefaults())
                      .csrf(CsrfConfigurer::disable)                           // For modifying requests via Postman
                      .exceptionHandling(handing -> handing
                                      .authenticationEntryPoint(restAuthenticationEntryPoint) // Handles auth error: Voorheen stond hier
                              // restAuthenticationEntryPoint als value, maar in het voorbeeld verwees die nergens heen.
                      )
                      .headers(headers -> headers.frameOptions().disable())           // for Postman, the H2 console
                      .authorizeHttpRequests(requests -> requests                    // manage access
                                      .requestMatchers(HttpMethod.POST, "/api/auth/user").permitAll()
                                      .requestMatchers("/actuator/shutdown").permitAll()      // needs to run test
                                      .requestMatchers(HttpMethod.POST, "/api/antifraud/transaction").hasRole("USER") //hasAuthority("USER")
                                      .requestMatchers(HttpMethod.GET, "/api/auth/list").hasRole("USER")
                                      .requestMatchers(HttpMethod.DELETE, "/api/auth/user").hasRole("USER")
                              // other matchers
                      )
                      .sessionManagement(session -> session
                              .sessionCreationPolicy(SessionCreationPolicy.STATELESS) // no session
                      )
                      // other configurations
                      .build();
          }
          @Bean
          public PasswordEncoder passwordEncoder() {
              return new BCryptPasswordEncoder();
          }
       } */
    learner_created: false
  - name: src/antifraud/ControllerExceptionHandler.java
    visible: true
    text: |
      package antifraud;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.http.ResponseEntity;
      import org.springframework.web.bind.MethodArgumentNotValidException;
      import org.springframework.web.bind.annotation.ControllerAdvice;
      import org.springframework.web.bind.annotation.ExceptionHandler;
      
      @ControllerAdvice
      public class ControllerExceptionHandler {
          @ExceptionHandler(UserExistsException.class)
          public ResponseEntity<String> handleUserExists(UserExistsException e) {
              return new ResponseEntity<>(HttpStatus.CONFLICT);
          }
          @ExceptionHandler(MethodArgumentNotValidException.class)
          public ResponseEntity<String> handleInvalidArgument(MethodArgumentNotValidException e) {
              return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
          }
          @ExceptionHandler(UserNotFoundException.class)
          public ResponseEntity<String> handleUserNotFound(UserNotFoundException e) {
              return new ResponseEntity<>(HttpStatus.NOT_FOUND);
          }
      }
    learner_created: false
  - name: src/antifraud/AntiFraudController.java
    visible: true
    text: |
      package antifraud;
      
      import jakarta.validation.Valid;
      import jakarta.validation.constraints.NotBlank;
      import org.springframework.http.HttpStatus;
      import org.springframework.security.crypto.password.PasswordEncoder;
      import org.springframework.web.bind.annotation.*;
      import org.springframework.web.server.ResponseStatusException;
      
      import java.util.ArrayList;
      import java.util.Optional;
      
      @RestController
      public class AntiFraudController {
          private final UserRepository userRepository;
          private final PasswordEncoder passwordEncoder;
          public AntiFraudController(UserRepository userRepository,
                                     PasswordEncoder passwordEncoder) {
              this.userRepository = userRepository;
              this.passwordEncoder = passwordEncoder;
          }
          @PostMapping("/api/antifraud/transaction")
          public TransactionDTO postTransaction(@Valid @RequestBody TransactionRequest request) {
              Transaction transaction = new Transaction();
              transaction.setAmount(request.getAmount());
              transaction.setAllowedLimit(200);
              transaction.setManualLimit(1500);
              TransactionDTO response = new TransactionDTO();
              response.setResult(transaction.validateInput().toString());
              return response;
          }
          @PostMapping("/api/auth/user")
          @ResponseStatus(HttpStatus.CREATED)
          public UserDTO postUser(@Valid @RequestBody UserRequest request) {
              if (userRepository.findUserByUsername(request.getUsername()).isPresent()) {
                  throw new UserExistsException();
              }
              User user = new User();
              user.setUsername(request.getUsername());
              user.setPassword(passwordEncoder.encode(request.getPassword()));
              user.setName(request.getName());
              user.setAuthority("USER");
              userRepository.save(user);
              UserDTO response = new UserDTO();
              response.setId(user.getId());
              response.setName(request.getName());
              response.setUsername(request.getUsername());
              return response;
          }
          @GetMapping("/api/auth/list")
          public ArrayList<UserDTO> getUsers() {
              ArrayList<UserDTO> response = new ArrayList<>();
              Iterable<User> dbResults = userRepository.findAll();
              dbResults.forEach(e -> {
                  UserDTO userDTO = new UserDTO();
                  userDTO.setId(e.getId());
                  userDTO.setName(e.getName());
                  userDTO.setUsername(e.getUsername());
                  response.add(userDTO);
              });
              return response;
          }
          @DeleteMapping("/api/auth/user/{username}")
          @ResponseStatus(HttpStatus.OK)
          public String deleteUser(@NotBlank @PathVariable String username) {
              System.out.println(username);
              Optional<User> dbResult = userRepository.findUserByUsername(username);
              dbResult.ifPresentOrElse(userRepository::delete, () -> { throw new UserNotFoundException(); });
              System.out.println(username);
              return "{ \"username:\"" + username + "," + "\"status\":" + "Deleted successfully!}";
          }
      }
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      buildscript {
          apply plugin: 'hyperskill'
      
          repositories {
              mavenCentral()
          }
      
          dependencies {
              classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
              classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'org.springframework.boot'
      apply plugin: 'io.spring.dependency-management'
      
      repositories {
          mavenCentral()
      }
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation 'org.springframework.boot:spring-boot-starter'
          implementation 'org.springframework.boot:spring-boot-starter-actuator'
          implementation 'org.springframework.boot:spring-boot-starter-web'
          implementation 'org.springframework.boot:spring-boot-starter-security'
          runtimeOnly 'com.h2database:h2'
          // testImplementation 'org.springframework.security:spring-security-test'
          implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
          implementation 'org.springframework.boot:spring-boot-starter-validation'
      }
      
      test {
          jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
      }
    learner_created: false
  - name: src/antifraud/AntiFraudApplication.java
    visible: true
    text: |-
      package antifraud;
      
      import org.springframework.boot.SpringApplication;
      import org.springframework.boot.autoconfigure.SpringBootApplication;
      
      @SpringBootApplication
      public class AntiFraudApplication {
          public static void main(String[] args) {
              SpringApplication.run(AntiFraudApplication.class, args);
          }
      }
    learner_created: false
  - name: src/antifraud/UserExistsException.java
    visible: true
    text: |
      package antifraud;
      
      
      import org.springframework.http.HttpStatus;
      import org.springframework.web.bind.annotation.ResponseStatus;
      @ResponseStatus(HttpStatus.CONFLICT)
      public class UserExistsException extends RuntimeException {
          public UserExistsException() {
              super();
          }
      }
    learner_created: false
  - name: src/antifraud/UserNotFoundException.java
    visible: true
    text: |-
      package antifraud;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.web.bind.annotation.ResponseStatus;
      @ResponseStatus(HttpStatus.NOT_FOUND)
      public class UserNotFoundException extends RuntimeException {
          public UserNotFoundException() {
              super();
          }
      }
    learner_created: false
  - name: test/AntiFraudTest.java
    visible: false
    text: |
      import antifraud.AntiFraudApplication;
      import com.google.gson.JsonArray;
      import com.google.gson.JsonObject;
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.dynamic.input.DynamicTesting;
      import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.mocks.web.request.HttpRequest;
      import org.hyperskill.hstest.mocks.web.response.HttpResponse;
      import org.hyperskill.hstest.stage.SpringTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      
      import java.util.ArrayList;
      import java.util.List;
      
      import static org.hyperskill.hstest.common.JsonUtils.getJson;
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;
      
      class TestHint {
          private final String apiPath;
          private final String requestBody;
          private final String message;
      
          public TestHint(String apiPath, String requestBody, String message) {
              this.apiPath = apiPath;
              this.requestBody = requestBody;
              this.message = message;
          }
      
          @Override
          public String toString() {
              return "Test case\n" +
                      "Testing api: '" + apiPath + '\'' + "\n" +
                      (requestBody.length() > 0 ? "request: '" + requestBody + '\'' + "\n" : "") +
                      "Expectations: '" + message + "'" + "\n" +
                      "-----";
          }
      }
      
      public class AntiFraudTest extends SpringTest {
      
          private final String transactionApi = "/api/antifraud/transaction";
          private final String userApi = "/api/auth/user";
          private final String userListApi = "/api/auth/list";
          private final String lockApi = "/api/auth/access";
          private final String roleApi = "/api/auth/role";
          List<Integer> userIdList = new ArrayList<>();
      
          private final String administrator = "{\n" +
                  "   \"name\": \"administrator\",\n" +
                  "   \"username\": \"administrator\",\n" +
                  "   \"password\": \"oMoa4VvqnLxW\"\n" +
                  "}";
      
          private final String johndoe1 = "{\n" +
                  "   \"name\": \"John Doe 1\",\n" +
                  "   \"username\": \"johndoe1\",\n" +
                  "   \"password\": \"oMoa3VvqnLxW\"\n" +
                  "}";
      
          private final String johndoe2 = "{\n" +
                  "   \"name\": \"John Doe 2\",\n" +
                  "   \"username\": \"johndoe2\",\n" +
                  "   \"password\": \"oMoa5VvqnLxW\"\n" +
                  "}";
      
          private final String johndoe3 = "{\n" +
                  "   \"name\": \"John Doe 3\",\n" +
                  "   \"username\": \"johndoe3\",\n" +
                  "   \"password\": \"oMoa6VvqnLxW\"\n" +
                  "}";
      
          private final String wronguser1 = "{\n" +
                  "   \"name\": \"John Doe 1\",\n" +
                  "   \"password\": \"oa3VvqnLxW\"\n" +
                  "}";
      
          private final String wronguser2 = "{\n" +
                  "   \"name\": \"John Doe 2\",\n" +
                  "   \"username\": \"johndoe1\"\n" +
                  "}";
      
          private final String wronguserCred1 = "{\n" +
                  "   \"name\": \"John Doe 1\",\n" +
                  "   \"username\": \"johndoe1\",\n" +
                  "   \"password\": \"oa3VvqnLxW\"\n" +
                  "}";
      
          private final String wronguserCred2 = "{\n" +
                  "   \"name\": \"John Do\",\n" +
                  "   \"username\": \"johndo\",\n" +
                  "   \"password\": \"oMoa3VvqnLxW\"\n" +
                  "}";
      
          private final String listAnswer1 = "[ {\n" +
                  "  \"id\" : 1,\n" +
                  "  \"name\" : \"administrator\",\n" +
                  "  \"username\" : \"administrator\",\n" +
                  "  \"role\" : \"ADMINISTRATOR\"\n" +
                  "}, {\n" +
                  "  \"id\" : 2,\n" +
                  "  \"name\" : \"John Doe 1\",\n" +
                  "  \"username\" : \"johndoe1\",\n" +
                  "  \"role\" : \"MERCHANT\"\n" +
                  "}, {\n" +
                  "  \"id\" : 4,\n" +
                  "  \"name\" : \"John Doe 2\",\n" +
                  "  \"username\" : \"johndoe2\",\n" +
                  "  \"role\" : \"MERCHANT\"\n" +
                  "} ]";
      
          private final String listAnswer2 = "[ {\n" +
                  "  \"id\" : 1,\n" +
                  "  \"name\" : \"administrator\",\n" +
                  "  \"username\" : \"administrator\",\n" +
                  "  \"role\" : \"ADMINISTRATOR\"\n" +
                  "}, {\n" +
                  "  \"id\" : 4,\n" +
                  "  \"name\" : \"John Doe 2\",\n" +
                  "  \"username\" : \"johndoe2\",\n" +
                  "  \"role\" : \"MERCHANT\"\n" +
                  "} ]";
      
          private final String listAnswer3 = "[ {\n" +
                  "  \"id\" : 1,\n" +
                  "  \"name\" : \"administrator\",\n" +
                  "  \"username\" : \"administrator\",\n" +
                  "  \"role\" : \"ADMINISTRATOR\"\n" +
                  "}, {\n" +
                  "  \"id\" : 4,\n" +
                  "  \"name\" : \"John Doe 2\",\n" +
                  "  \"username\" : \"johndoe2\",\n" +
                  "  \"role\" : \"SUPPORT\"\n" +
                  "} ]";
      
          public AntiFraudTest() {
              super(AntiFraudApplication.class, "../service_db.mv.db");
          }
      
          /**
           * Method for restarting application
           *
           */
          private CheckResult restartApplication() {
              try {
                  reloadSpring();
              } catch (Exception ex) {
                  throw new UnexpectedError(ex.getMessage());
              }
              return CheckResult.correct();
          }
      
          private HttpResponse checkResponseStatus(String user, String body,
                                                   int status, String api, String method) {
              HttpRequest request = null;
              switch (method) {
                  case "GET":
                      request = get(api);
                      break;
                  case "POST":
                      request = post(api, body);
                      break;
                  case "PUT":
                      request = put(api, body);
                      break;
                  case "DELETE":
                      request = delete(api);
                      break;
              }
      
              if (user != null) {
                  JsonObject userJson = getJson(user).getAsJsonObject();
                  String password = userJson.get("password").getAsString();
                  String login = userJson.get("username").getAsString().toLowerCase();
                  request = request.basicAuth(login, password);
              }
              HttpResponse response = request.send();
      
              if (response.getStatusCode() != status) {
                  throw new WrongAnswer(method + " " + api  + " should respond with "
                          + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                          + "Response body:\n" + response.getContent() + "\n");
              }
              return response;
          }
      
          public boolean isNumeric(String strNum) {
              if (strNum == null) {
                  return false;
              }
              try {
                  long l = Long.parseLong(strNum);
              } catch (NumberFormatException nfe) {
                  return false;
              }
              return true;
          }
      
          CheckResult testAddUser(String body, int status, String role, TestHint hint) {
      
              System.out.println(hint.toString());
      
              HttpResponse response = checkResponseStatus(null, body, status, userApi, "POST");
      
              if (response.getStatusCode() == 201) {
      
                  JsonObject rightResponse = getJson(body).getAsJsonObject();
                  rightResponse.remove("password");
      
                  // Check is it JSON in response or something else
                  if (!response.getJson().isJsonObject()) {
                      return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                              response.getContent().getClass());
      
                  }
      
                  JsonObject jsonResponse = response.getJson().getAsJsonObject();
      
                  // Check if password is presence in response
                  if (jsonResponse.get("password") != null) {
                      return CheckResult.wrong("You must remove password from response\n" +
                              jsonResponse);
                  }
      
                  if (jsonResponse.get("id") == null) {
                      return CheckResult.wrong("Response must contain user ID\n" +
                              "Received response:\n" +
                              jsonResponse);
                  }
      
                  if (jsonResponse.get("id").isJsonNull()) {
                      return CheckResult.wrong("Response must contain user ID\n" +
                              "Received response:\n" +
                              jsonResponse);
                  }
      
                  if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
                      return CheckResult.wrong("User ID must be unique!\n" +
                              "Received response:\n" +
                              jsonResponse);
                  }
      
                  rightResponse.addProperty("id", jsonResponse.get("id").toString());
                  // Check JSON in response
                  expect(response.getContent()).asJson().check(
                          isObject()
                                  .value("id", isInteger())
                                  .value("name", rightResponse.get("name").getAsString())
                                  .value("role", role)
                                  .value("username", isString(s -> s.equalsIgnoreCase(rightResponse.get("username").getAsString())))
                  );
                  userIdList.add(jsonResponse.get("id").getAsInt());
              }
              return CheckResult.correct();
          }
      
          CheckResult testDeleteUser(String body, int status, String user, TestHint hint) {
      
              System.out.println(hint.toString());
      
              HttpResponse response = checkResponseStatus(body, "", status, userApi + "/" + user, "DELETE");
      
              if (response.getStatusCode() == 200) {
      
                  // Check is it JSON in response or something else
                  if (!response.getJson().isJsonObject()) {
                      return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                              response.getContent().getClass());
      
                  }
      
                  JsonObject jsonResponse = response.getJson().getAsJsonObject();
      
                  // Check JSON in response
                  expect(response.getContent()).asJson().check(
                          isObject()
                                  .value("status", "Deleted successfully!")
                                  .value("username", isString(s -> s.equalsIgnoreCase(user)))
                  );
              }
              return CheckResult.correct();
          }
      
          private CheckResult testListUser(String user, int status, String answer,
                                           int position, TestHint hint) {
      
              System.out.println(hint.toString());
      
              HttpResponse response = checkResponseStatus(user, "", status, userListApi, "GET");
      
              if (response.getStatusCode() == 200) {
                  // Check is it array of JSON in response or something else
                  if (!response.getJson().isJsonArray()) {
                      return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                              response.getContent().getClass());
      
                  }
      
                  JsonArray correctJson = getJson(answer).getAsJsonArray();
                  JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
                  if (responseJson.size() == 0) {
                      throw new WrongAnswer("Empty array in response!");
                  }
      
                  if (responseJson.size() != position + 1) {
                      throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                              " users in response, must be - " + (position + 1));
                  }
      
                  // Check JSON in response
                  expect(responseJson.get(position).toString()).asJson().check(
                          isObject()
                                  .value("id", isInteger())
                                  .value("name", correctJson.get(position).getAsJsonObject().get("name").getAsString())
                                  .value("role", correctJson.get(position).getAsJsonObject().get("role").getAsString())
                                  .value("username",
                                          isString(s -> s.equalsIgnoreCase(correctJson.get(position).getAsJsonObject()
                                                  .get("username").getAsString()))
                                  ));
      
              }
              return CheckResult.correct();
          }
      
          private CheckResult testLock(String api, String user, int status, String operation, String username, TestHint hint) {
              System.out.println(hint.toString());
      
              JsonObject jsonBody = new JsonObject();
              jsonBody.addProperty("username", username);
              jsonBody.addProperty("operation", operation);
      
              HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, api, "PUT");
              if (response.getStatusCode() == 200) {
                  expect(response.getContent()).asJson().check(
                          isObject()
                                  .value("status", isString(s ->
                                          s.equalsIgnoreCase("User " + username + " " + operation + "ed!"))));
              }
              return CheckResult.correct();
          }
      
          private CheckResult testRole(String api, String user, int status, String role, String username, TestHint hint) {
              System.out.println(hint.toString());
      
              JsonObject jsonBody = new JsonObject();
              jsonBody.addProperty("username", username);
              jsonBody.addProperty("role", role);
      
              HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, api, "PUT");
      
              if (response.getStatusCode() == 200) {
                  expect(response.getContent()).asJson().check(
                          isObject()
                                  .value("id", isInteger())
                                  .value("name", isString())
                                  .value("role", role)
                                  .value("username", isString(s -> s.equalsIgnoreCase(username))));
              }
              return CheckResult.correct();
          }
      
          private CheckResult testTransaction(String user, String api, String method,
                                              int status, String amount, String answer, TestHint hint) {
      
              System.out.println(hint.toString());
      
              JsonObject jsonBody = new JsonObject();
              if (isNumeric(amount)) {
                  jsonBody.addProperty("amount", Long.parseLong(amount));
              } else if (amount == null) {
                  jsonBody.addProperty("amount", (Boolean) null);
              } else if (!amount.equals("empty")) {
                  jsonBody.addProperty("amount", amount);
              }
      
              HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, api, method);
      
              // Check JSON in response
              if (response.getStatusCode() == 200) {
                  expect(response.getContent()).asJson().check(
                          isObject()
                                  .value("result", answer));
              }
              return CheckResult.correct();
          }
      
          @DynamicTest
          DynamicTesting[] dt = new DynamicTesting[]{
                  // Test POST request for signup api
                  () -> testAddUser(wronguser1, 400, "MERCHANT",
                          new TestHint(userApi, wronguser1, "In case of wrong data in request, endpoint" +
                                  " must respond with BAD REQUEST  status (400).")), // 1
      
                  () -> testAddUser(wronguser2, 400, "MERCHANT",
                          new TestHint(userApi, wronguser2, "In case of wrong data in request, endpoint" +
                                  " must respond with BAD REQUEST  status (400).")), // 2
      
                  () -> testAddUser(administrator, 201, "ADMINISTRATOR",
                          new TestHint(userApi, johndoe1, "If user successfully added, endpoint" +
                                  " must respond with HTTP CREATED status (201) ")), // 3
      
                  () -> testListUser(administrator, 200,  listAnswer1, 0,
                          new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                  " and body with array of objects representing the users sorted by ID in ascending order.")), // 4
      
      
                  () -> testAddUser(johndoe1, 201, "MERCHANT",
                          new TestHint(userApi, johndoe1, "If user successfully added, endpoint" +
                                  " must respond with HTTP CREATED status (201) ")), // 5
      
                  () -> testListUser(administrator, 200,  listAnswer1, 1,
                          new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                  " and body with array of objects representing the users sorted by ID in ascending order.")), // 6
      
                  () -> testListUser(wronguserCred1, 401,  listAnswer1, 0,
                          new TestHint(userListApi, "", "A user with incorrect credentials is not allowed")), // 7
      
                  () -> testListUser(wronguserCred2, 401,  listAnswer1, 0,
                          new TestHint(userListApi, "", "A user with incorrect credentials is not allowed")), // 8
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 401,"1", "ALLOWED",
                          new TestHint(transactionApi, "", "Merchant after registration" +
                                  " must be LOCKED")), // 9
      
                  () -> testLock(lockApi, administrator, 200, "UNLOCK", "johndoe1",
                          new TestHint(lockApi, "", "A user johndoe1 must be UNLOCKED")), // 10
                  () -> testTransaction(johndoe1, transactionApi, "POST", 200,"1", "ALLOWED",
                          new TestHint(transactionApi, "", "A user johndoe1 must be UNLOCKED")), // 11
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 200,"1", "ALLOWED",
                          new TestHint(transactionApi, "amount = 1", "Result validating of Transaction" +
                                  " must be 'ALLOWED'")), // 12
      
                  // Testing persistence
                  () -> restartApplication(), // 13
      
                  () -> testListUser(administrator, 200,  listAnswer1, 1,
                          new TestHint(userListApi, "", "After restart user must exist")), // 14
      
                  () -> testAddUser(johndoe1, 409, "MERCHANT",
                          new TestHint(userApi, johndoe1, "In case of an attempt to register an existing user," +
                                  " endpoint must respond with HTTP CONFLICT status (409).")), // 15
      
                  () -> testAddUser(johndoe2, 201, "MERCHANT",
                          new TestHint(userApi, johndoe2, "If user successfully added, endpoint" +
                                  " must respond with HTTP CREATED status (201) ")), // 16
      
                  () -> testListUser(administrator, 200,  listAnswer1, 2,
                          new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                  " and body with array of objects representing the users sorted by ID in ascending order.")), // 17
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 200,"199", "ALLOWED",
                          new TestHint(transactionApi, "amount = 199", "Result validating of Transaction" +
                                  " must be 'ALLOWED'")), // 18
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 200,"200", "ALLOWED",
                          new TestHint(transactionApi, "amount = 200", "Result validating of Transaction" +
                                  " must be 'ALLOWED'")), // 19
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 200,"201", "MANUAL_PROCESSING",
                          new TestHint(transactionApi, "amount = 201", "Result validating of Transaction" +
                                  " must be 'MANUAL_PROCESSING'")), // 20
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 200,"1499", "MANUAL_PROCESSING",
                          new TestHint(transactionApi, "amount = 1499", "Result validating of Transaction" +
                                  " must be 'MANUAL_PROCESSING'")), // 21
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 200,"1500", "MANUAL_PROCESSING",
                          new TestHint(transactionApi, "amount = 1500", "Result validating of Transaction" +
                                  " must be 'MANUAL_PROCESSING'")), // 22
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 200,"1501", "PROHIBITED",
                          new TestHint(transactionApi, "amount = 1501", "Result validating of Transaction" +
                                  " must be 'PROHIBITED'")), // 23
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 200,"2000", "PROHIBITED",
                          new TestHint(transactionApi, "amount = 2000", "Result validating of Transaction" +
                                  " must be 'PROHIBITED'")), // 24
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 400,"-1", "Wrong request!",
                          new TestHint(transactionApi, "amount = -1", "Response status" +
                                  " must be 'Bad request'")), // 25
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 400,"0", "Wrong request!",
                          new TestHint(transactionApi, "amount = 0", "Response status" +
                                  " must be 'Bad request'")), // 26
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 400,null, "Wrong request!",
                          new TestHint(transactionApi, "amount = null", "Response status" +
                                  " must be 'Bad request'")), // 27
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 400,"", "Wrong request!",
                          new TestHint(transactionApi, "amount = \"\"", "Response status" +
                                  " must be 'Bad request'")), // 28
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 400," ", "Wrong request!",
                          new TestHint(transactionApi, "amount = \" \"", "Response status" +
                                  " must be 'Bad request'")), // 29
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 400,"empty", "Wrong request!",
                          new TestHint(transactionApi, "empty body", "Response status" +
                                  " must be 'Bad request'")), // 30
      
                  () -> testDeleteUser(administrator,404,"somebody",
                          new TestHint(userApi, userApi + "/" + "somebody", "If a user is not found," +
                                  " respond with HTTP Not Found status (404).")), // 31
      
                  () -> testDeleteUser(administrator,200,"johndoe1",
                          new TestHint(userApi, userApi + "/" + "johndoe1", "The endpoint must delete" +
                                  " the user and respond with HTTP OK status (200)")), // 32
      
                  () -> testListUser(administrator, 200,  listAnswer2, 1,
                          new TestHint(userListApi, "", "User 'johndoe1' must be delete")), // 33
      
                  () -> testRole(roleApi, administrator,404,"MERCHANT", "johndoe22",
                          new TestHint(roleApi, "", "If a user is not found, endpoint" +
                                  " must respond with the HTTP Not Found status (404).")), // 34
      
                  () -> testRole(roleApi, administrator,400,"USER", "johndoe2",
                          new TestHint(roleApi, "", "If a role is not found, endpoint" +
                                  " must respond with the HTTP Bad Request status (400).")), // 35
      
                  () -> testRole(roleApi, administrator,400,"ADMINISTRATOR", "johndoe2",
                          new TestHint(roleApi, "", "If a role is ADMINISTRATOR, endpoint" +
                                  " must respond with the HTTP Bad Request status (400).")), // 36
      
                  () -> testRole(roleApi, administrator,200,"SUPPORT", "johndoe2",
                          new TestHint(roleApi, "", "If a role successfully changed," +
                                  " respond with the HTTP OK status (200)")), // 37
      
                  () -> testRole(roleApi, administrator,409,"SUPPORT", "johndoe2",
                          new TestHint(roleApi, "", "If a role already assigned to a user," +
                                  " endpoint must respond with the HTTP Conflict status (409).")), // 38
      
                  () -> testLock(lockApi, administrator, 200, "UNLOCK", "johndoe2",
                          new TestHint(lockApi, "", "A user johndoe2 must be UNLOCKED")), // 39
      
                  () -> testListUser(johndoe2, 200,  listAnswer3, 1,
                          new TestHint(userListApi, "", "Role for user 'johndoe2" +
                                  "' must be changed to SUPPORT")), // 40
      
                  () -> testTransaction(johndoe2, transactionApi, "POST", 403,"1", "ALLOWED",
                          new TestHint(transactionApi, "", "Role MERCHANT must be removed from" +
                                  " user johndoe2!")), // 41
      
                  // test Locking
                  () -> testAddUser(johndoe3, 201, "MERCHANT",
                          new TestHint(userApi, johndoe3, "If user successfully added, endpoint" +
                                  " must respond with HTTP CREATED status (201) ")), // 42
      
                  () -> testTransaction(johndoe3, transactionApi, "POST", 401,"1", "ALLOWED",
                          new TestHint(transactionApi, "", "MERCHANT user after registration" +
                                  " must be LOCKED")), // 43
      
                  () -> testLock(lockApi, administrator, 200, "UNLOCK", "johndoe3",
                          new TestHint(lockApi, "", "A user johndoe3 must be UNLOCKED")), // 44
      
                  () -> testTransaction(johndoe3, transactionApi, "POST", 200,"1", "ALLOWED",
                          new TestHint(transactionApi, "", "A user johndoe3 must be UNLOCKED")), // 45
      
                  () -> testLock(lockApi, administrator, 200, "LOCK", "johndoe3",
                          new TestHint(lockApi, "", "A user johndoe3 must be LOCKED")), // 46
      
                  () -> testTransaction(johndoe3, transactionApi, "POST", 401,"1", "ALLOWED",
                          new TestHint(transactionApi, "", "A user johndoe3 must be LOCKED")), // 47
      
                  () -> testLock(lockApi, administrator, 200, "UNLOCK", "johndoe3",
                          new TestHint(lockApi, "", "A user johndoe3 must be UNLOCKED")), // 48
      
                  // test role model
                  () -> testTransaction(administrator, transactionApi, "POST", 403,"1", "ALLOWED",
                          new TestHint(transactionApi, "", "A user with role ADMINISTRATOR" +
                                  " must not have access to " + transactionApi)), // 49
      
                  () -> testTransaction(administrator, transactionApi + "/", "POST", 403,"1", "ALLOWED",
                          new TestHint(transactionApi + "/", "", "A user with role ADMINISTRATOR" +
                                  " must not have access to " + transactionApi + "/")), // 50
      
                  () -> testTransaction(johndoe2, transactionApi, "POST", 403,"1", "ALLOWED",
                          new TestHint(transactionApi, "", "A user with role SUPPORT" +
                                  " must not have access to " + transactionApi)), // 51
      
                  () -> testTransaction(johndoe2, transactionApi + "/", "POST", 403,"1", "ALLOWED",
                          new TestHint(transactionApi + "/", "", "A user with role SUPPORT" +
                                  " must not have access to " + transactionApi + "/")), // 52
      
                  () -> testTransaction(null, transactionApi, "POST", 401,"1", "ALLOWED",
                          new TestHint(transactionApi, "", "A user with role ANONYMOUS" +
                                  " must not have access to " + transactionApi)), // 53
      
                  () -> testDeleteUser(null,401,"johndoe1",
                          new TestHint(userApi, "", "A user with role ANONYMOUS" +
                                  " must not have access to DELETE " + userApi)), // 54
      
                  () -> testDeleteUser(johndoe2,403,"johndoe1",
                          new TestHint(userApi, "", "A user with role SUPPORT" +
                                  " must not have access to DELETE " + userApi)), // 55
      
                  () -> testDeleteUser(johndoe3,403,"johndoe1",
                          new TestHint(userApi, "", "A user with role MERCHANT" +
                                  " must not have access to DELETE " + userApi)), // 56
      
                  () -> testDeleteUser(johndoe3,403,"",
                          new TestHint(userApi, "", "A user with role MERCHANT" +
                                  " must not have access to DELETE " + userApi)), // 57
      
                  () -> testListUser(null, 401,  listAnswer3, 1,
                          new TestHint(userListApi, "", "A user with role ANONYMOUS" +
                                  " must not have access to " + userListApi)), // 58
      
                  () -> testListUser(johndoe3, 403,  listAnswer3, 1,
                          new TestHint(userListApi, "", "A user with role MERCHANT" +
                                  " must not have access to " + userListApi)), // 59
      
                  () -> testLock(lockApi, johndoe3, 403, "UNLOCK", "johndoe2",
                          new TestHint(lockApi, "", "A user with role MERCHANT" +
                                  " must not have access to "  + lockApi)), // 60
      
                  () -> testLock(lockApi, johndoe2, 403, "UNLOCK", "johndoe2",
                          new TestHint(lockApi, "", "A user with role SUPPORT" +
                                  " must not have access to "  + lockApi)), // 61
      
                  () -> testLock(lockApi + "/", johndoe3, 403, "UNLOCK", "johndoe2",
                          new TestHint(lockApi + "/", "", "A user with role MERCHANT" +
                                  " must not have access to " + lockApi + "/")), // 62
      
                  () -> testLock(lockApi + "/", johndoe2, 403, "UNLOCK", "johndoe2",
                          new TestHint(lockApi + "/", "", "A user with role SUPPORT" +
                                  " must not have access to " + lockApi + "/")), // 63
      
                  () -> testLock(lockApi, null, 401, "UNLOCK", "johndoe2",
                          new TestHint(lockApi, "", "A user with role ANONYMOUS" +
                                  " must not have access to " + lockApi)), // 64
      
                  () -> testRole(roleApi, johndoe2,403,"SUPPORT", "johndoe2",
                          new TestHint(roleApi, "", "A user with role SUPPORT" +
                                  " must not have access to " + roleApi)), // 65
      
                  () -> testRole(roleApi, johndoe3,403,"SUPPORT", "johndoe2",
                          new TestHint(roleApi, "", "A user with role MERCHANT" +
                                  " must not have access to " + roleApi)), // 66
      
                  () -> testRole(roleApi, null,401,"SUPPORT", "johndoe2",
                          new TestHint(roleApi, "", "A user with role ANONYMOUS" +
                                  " must not have access to " + roleApi)), // 67
      
                  () -> testRole(roleApi + "/", johndoe2,403,"SUPPORT", "johndoe2",
                          new TestHint(roleApi + "/", "", "A user with role SUPPORT" +
                                  " must not have access to " + roleApi + "/")), // 68
      
                  () -> testRole(roleApi + "/", johndoe3,403,"SUPPORT", "johndoe2",
                          new TestHint(roleApi + "/", "", "A user with role MERCHANT" +
                                  " must not have access to " + roleApi + "/")), // 69
      
          };
      }
    learner_created: false
  - name: src/antifraud/RoleDTO.java
    visible: true
    learner_created: true
  - name: src/antifraud/AccessDTO.java
    visible: true
    learner_created: true
  - name: src/antifraud/RoleRequest.java
    visible: true
    learner_created: true
  - name: src/antifraud/AccessRequest.java
    visible: true
    learner_created: true
  - name: src/antifraud/LockState.java
    visible: true
    learner_created: true
  - name: src/antifraud/RoleConflictException.java
    visible: true
    learner_created: true
  - name: src/antifraud/LockStateException.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/18069#comment
status: Solved
record: 3
